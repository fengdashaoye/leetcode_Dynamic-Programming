Given two integer arrays A and B, return the maximum length of an subarray that appears in both arrays.

Example 1:
Input:
A: [1,2,3,2,1]
B: [3,2,1,4,7]
Output: 3
Explanation: 
The repeated subarray with maximum length is [3, 2, 1].
Note:
1 <= len(A), len(B) <= 1000
0 <= A[i], B[i] < 100

最长公共连续子串--
动态规划
定义一个而且数组 int[][] content
content[i][j]
代表遍历到A[i] 和 B[j]时候的最长公共子串
则此时,content[i][j] = content[i-1][j-1] + 1
因为公共子串，则此时A[i] == B[j]
所以此时要看A[i-1] 和 B[j-1]的情况了


代码：
class Solution {
    public int findLength(int[] A, int[] B) {
        if(A.length <= 0 || B.length <= 0){
            return 0;
        }
        int[][] content = new int[A.length][B.length];
        int max = 0;
        for(int i = 0; i < content.length; i++){
            for(int j = 0; j < content[0].length; j++){
                if(A[i] == B[j]){
                    if(i == 0 || j == 0){
                        content[i][j] = 1;
                    }else{
                        content[i][j] = content[i - 1][j - 1] + 1;
                    }
                    if(max < content[i][j]){
                        max = content[i][j];
                    }
                }
            }
        }
        return max;
        
    }
}
