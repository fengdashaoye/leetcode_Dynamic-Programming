Find the contiguous subarray within an array (containing at least one number) which has the largest product.

For example, given the array [2,3,-2,4],
the contiguous subarray [2,3] has the largest product = 6.

思路：这道题我的思路是很乱的，因为存在负数的因数。看了下别人的代码，不愧是别人家的代码，优雅简洁。
定义3个变量，result为最大值，最终要返回的，max为要迭代坐标i之前的所有数字的乘法的最大值，max为要迭代坐标i之前的所有数字的乘法的最小值。
不断迭代向最后一个坐标走去。
更新max时，max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);首先比较Math.max(max * nums[i], min * nums[i])是因为可能min是最小
的负数，如果刚好nums[i]为负数，则成为最大值，他们比较出的最大值与nums[i]比较，因为nums[i]可能更大，因为可能前面的max和min都为负数。更新完max
后用相同套路更新min.
min = Math.min(Math.min(temp * nums[i], min * nums[i]), nums[i]);temp为max还没更新时的值，先比较Math.min(temp * nums[i], min * nums[i])是因为
nums[i]可能为负数，而temp为之前的最大整数,min为最小值，最大正整数*负数=最小整数，因为是比较Math.min，所以可以得到比较的最小值，在于nums[i]比较
得到坐标i（包括i）以左的所有数字的最大值和最小值。
result视情况更新。
二重比较，之前没有见到过。。。
这是我见过得写的比较好的代码。

代码：
class Solution {
    public int maxProduct(int[] nums) {
        if(nums == null || nums.length <= 0){
            return 0;
        }
        int max = nums[0];//max为i坐标之前正数的最大值
        int min = nums[0];//min为i坐标之前负数的最小值，因为是乘风，所以有可能负负得正，得到最大值
        int result = nums[0];
        
        for(int i = 1; i < nums.length; i++){
            int temp = max;//保存max的值，max更新后会变化
            max = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);
            min = Math.min(Math.min(temp * nums[i], min * nums[i]), nums[i]);
            if(max > result){
                result = max;
            }
        }
        return result;
        
        
        
    }
}
