You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint 
stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police 
if two adjacent houses were broken into on the same night.

Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob 
tonight without alerting the police.

思路：这是一道动态规划题目。题目可以理解为给一个int数组，找出不相连的数字的和的最大解。
其实可以理解成小偷从0坐标房子开始头东西，他可以选择偷，或者不偷，一步步，直到偷到最后一家。
定义一个max数组,max[0] = nums[0]代表终点为0坐标房子，它能偷到的最大值为nums[0], max[1]代表终点为1坐标房子,因为需要满足约束，所偷的房子不能
直连，因此max[1] = Math.max(nums[0], nums[1])。
其实我们能找出规律，max[i] = Math.max(max[i - 2] + nums[i], max[i - 1])，如果终点为i，要么偷到i-2坐标房子加上i坐标房子的钱，要么偷到终点为i-1
坐标的房子。

因为给定了数组，我们从头开始，因为最大值，所以要偷到最后。
感觉动态规划就是从初始开始，初始为终点，计算其最大值，然后以其为条件，以计算到的值为参数，迭代后面的点。嗯，有困难，也有意思。
代码：
class Solution {
    public int rob(int[] nums) {
        if(nums.length == 0){
            return 0;
        }
        if(nums.length == 1){
            return nums[0];
        }
        int[] max = new int[nums.length];
        max[0] = nums[0];
        max[1] = Math.max(max[0], nums[1]);
        for(int i = 2; i < nums.length; i++){
            max[i] = Math.max(max[i - 2] + nums[i], max[i - 1]);
        }
        return max[max.length - 1];
    }
}
