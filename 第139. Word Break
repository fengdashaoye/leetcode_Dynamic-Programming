Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a 
space-separated sequence of one or more dictionary words. You may assume the dictionary does not contain duplicate words.

For example, given
s = "leetcode",
dict = ["leet", "code"].

Return true because "leetcode" can be segmented as "leet code".

UPDATE (2017/1/4):
The wordDict parameter had been changed to a list of strings (instead of a set of strings). Please reload the code definition to
get the latest changes.

思路：这道题想简单了，如果遇到
"cars"
["car","ca","rs"] 应该输出true，但是我输出false，因为在遍历第一个后，后面的就不行了，但是如果从第二个开始，往后是可以的，这应该是backtrack
的题目，没有那么简单。
代码：
class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        for(int i = 0; i < wordDict.size(); i++){
            if(s.contains(wordDict.get(i))){
                int start = s.indexOf(wordDict.get(i));
                s = s.substring(0, start) + s.substring(start + wordDict.get(i).length(), s.length());
                i = 0;//再重头开始
            }
            if(s.length() <= 0){
                return true;
            }
            
        }
        if(s.length() > 0){
            return false;
        }
        return true;
        
        
    }
}

经过修改+以前经验：过了21个案例
代码：但是遇到这样的"ccbb"
["bc","cb"]
由于第一回删掉cb后剩下cb，同样还能匹配，输出true,但是不能这样，应该输出false。对于这种情况应该怎么处理。

class Solution {
    boolean result = false;
    public boolean wordBreak(String s, List<String> wordDict) {
        if(s == null || s.length() <= 0){
            return false;
        }
        boolean content = backtrack(s, wordDict);
        return result;
    }
    public boolean backtrack(String s, List<String> wordDict){
        //System.out.println(result);
        //System.out.println(s.length());
        if(s.length() <= 0){
            return true;
        }
        
        for(int i = 0; i < wordDict.size(); i++){
            if(s.contains(wordDict.get(i))){
                
                result = result || backtrack(s.substring(0, s.indexOf(wordDict.get(i))) + s.substring(s.indexOf(wordDict.get(i)) + 
                                                                                    wordDict.get(i).length(), s.length()), wordDict);
                System.out.println(backtrack(s.substring(0, s.indexOf(wordDict.get(i))) + s.substring(s.indexOf(wordDict.get(i)) + 
                                                                                    wordDict.get(i).length(), s.length()), wordDict));
                System.out.println("result: " + result);
            }
        }
        return false;
        
    }
}

别人的思路：
两重循环，result[i]代表长度s.substring(0, i)可有wordDict组成。
i不断往后跑，如果result[j]&&wordDict.contains(s.substring(j, i)) == true，这说明s.substring(0, j)可由wordDict组成,
wordDict.contains(s.substring(j, i))又为true，所以设置result[i]=true，即s.substring(0, i)可由wordDict组成.
如此不断一步步往后跑。

class Solution {
    boolean result = false;
    public boolean wordBreak(String s, List<String> wordDict) {
        
        boolean[] result = new boolean[s.length() + 1];
        result[0] = true;
        for(int i = 1; i <= s.length(); i++){//注意是<=，因为s.substring(j,i)不包括i坐标的内容
            for(int j = 0; j < i; j++){
                if(result[j] && wordDict.contains(s.substring(j, i))){
                    result[i] = true;
                    break;
                }
            }
        }
        return result[s.length()];
    }
    
}


