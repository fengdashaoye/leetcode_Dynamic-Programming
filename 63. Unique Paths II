Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]

思路和Unique Paths那道题大体一样，obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1];不过需要判断obstacleGrid[i-1][j]和
obstacleGrid[i][j-1]是否是障碍物，如果是的就不加那个元素了，除此以外，在给[][0]和[0][]赋值时，如果前面出现了障碍物，则不存在起点到该点
的路径了，因为起点只能向左或向下，遇到障碍物后就不能继续了。所以在给[][0]和[0][]赋值成1时需要判断。
除此以外，因为障碍物用1表示，[][0]和[0][]也是用1表示路径数量，所以在开头把障碍物的值从1变成-1.
代码：
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid[0][0] == 1){
            return 0;
        }
        int heng = obstacleGrid.length;
        int shu = obstacleGrid[0].length;
        for(int i = 0; i < heng; i++){
            for(int j = 0; j < shu; j++){
                if(obstacleGrid[i][j] == 1){
                    obstacleGrid[i][j] = -1;
                }
            }
        }
        int panduan = 0;
        for(int i = 0; i < heng; i++){
            if(panduan == 1){
                break;
            }
            if(obstacleGrid[i][0] != -1){
                obstacleGrid[i][0] = 1;
            }else{
                panduan = 1;
            }
        }
        panduan = 0;
        for(int i = 0; i < shu; i++){
            if(panduan == 1){
                break;
            }
            if(obstacleGrid[0][i] != -1){
                obstacleGrid[0][i] = 1;
            }else{
                panduan = 1;
            }
        }
        for(int i = 1; i < heng; i++){
            for(int j = 1; j < shu; j++){
                if(obstacleGrid[i][j] != -1){
                    if(obstacleGrid[i-1][j] != -1 && obstacleGrid[i][j-1] != -1){
                        obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1];
                    }else if(obstacleGrid[i-1][j] != -1 && obstacleGrid[i][j-1] == -1){
                        obstacleGrid[i][j] = obstacleGrid[i-1][j];
                    }else if(obstacleGrid[i-1][j] == -1 && obstacleGrid[i][j-1] != -1){
                        obstacleGrid[i][j] = obstacleGrid[i][j-1];
                    }else{
                        obstacleGrid[i][j] = 0;
                    }
                }
            }
        }
        if(obstacleGrid[heng - 1][shu - 1] == -1){
            obstacleGrid[heng - 1][shu - 1] = 0;
        }
        return obstacleGrid[heng - 1][shu - 1];
        
    }
}
